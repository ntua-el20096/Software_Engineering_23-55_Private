{
	"info": {
		"_postman_id": "3699b6be-fce8-4939-8ace-68c29f1697d5",
		"name": "home",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33032027",
		"_collection_link": "https://dark-crater-344906.postman.co/workspace/d17b4cd1-a3c4-4943-9dcc-f77a16340070/collection/33031401-3699b6be-fce8-4939-8ace-68c29f1697d5?action=share&source=collection_link&creator=33032027"
	},
	"item": [
		{
			"name": "1. healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and dataconnection\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('dataconnection');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Dataconnection is an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.dataconnection).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/healthcheck",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"healthcheck"
					]
				},
				"description": "This endpoint is used to perform a health check on the admin service of the NTUAFlix API.\n\nThe response to the last execution of this request returned a status code of 200, indicating a successful response. The content type of the response was 'application/json', and the response body included a JSON object with 'status' and 'dataconnection' fields.\n\nThe 'status' field in the response body indicates the status of the health check, and the 'dataconnection' field provides information related to the data connection.\n\nPlease note that the specific values within the 'status' and 'dataconnection' fields will vary based on the health check results."
			},
			"response": []
		},
		{
			"name": "2. title_basics",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.not.be.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "truncated_title.basics",
							"type": "file",
							"src": "postman-cloud:///1eecdb7b-4edd-49e0-b41a-8752d3b80ec3"
						}
					]
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlebasics?format=json",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"upload",
						"titlebasics"
					],
					"query": [
						{
							"key": "format",
							"value": "json"
						}
					]
				},
				"description": "This endpoint allows administrators to upload title basics to the NTUAFlix API. The request should be sent as an HTTP POST to the specified URL with the payload in form-data format.\n\n### Request Body\n\n- `truncated_title.basics` (file): This parameter should contain the file to be uploaded as the title basics.\n    \n\n### Response\n\nUpon successful execution, the API returns a status code of 200 with a JSON response containing the following fields:\n\n- `status`: Indicates the status of the operation.\n- `message`: Provides additional information about the operation."
			},
			"response": []
		},
		{
			"name": "3. title_akas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false,
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "truncated_title.akas",
							"type": "file",
							"src": "postman-cloud:///1eecdb7c-e5fd-4400-b8f9-51f0ae149da6"
						}
					]
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleakas",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"upload",
						"titleakas"
					]
				},
				"description": "This HTTP POST request is used to upload title akas for the admin in the NTUAFlix API. The request should be made to [https://localhost:9876/ntuaflix_api/admin/upload/titleakas](https://localhost:9876/ntuaflix_api/admin/upload/titleakas).\n\n### Request Body\n\nThe request body should be of form-data type and include a key \"truncated_title.akas\" with the value being a file.\n\n### Response\n\nUpon successful execution, the API returns a 200 status with a JSON response containing \"status\" and \"message\" fields."
			},
			"response": []
		},
		{
			"name": "4. name.basics/principals",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Status field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.be.a('string').and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Message field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false,
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "truncated_name.basics",
							"type": "file",
							"src": "postman-cloud:///1eecdb7e-319e-4b60-a10b-db1c3266675b"
						}
					]
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/upload/namebasics",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"upload",
						"namebasics"
					]
				},
				"description": "\n    \n### Upload Name Basics\n\nThis API endpoint is used to upload name basics for the NTUAflix admin.\n\n#### Request Body\n- Form-Data\n    - `truncated_name.basics` (file): The file containing the name basics data.\n\n#### Response\nUpon a successful execution, the API returns a JSON response with the following fields:\n- `status`: The status of the operation.\n- `message`: Additional information or error message, if any.\n\n"
			},
			"response": []
		},
		{
			"name": "5. title_crew",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "truncated_title.crew",
							"type": "file",
							"src": "postman-cloud:///1eecdb7e-f675-4560-924b-ea5b545f4d9b"
						}
					]
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titlecrew",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"upload",
						"titlecrew"
					]
				},
				"description": "This API endpoint allows administrators to upload title crew information for NTUAFlix. The HTTP POST request should be made to [https://localhost:9876/ntuaflix_api/admin/upload/titlecrew](https://localhost:9876/ntuaflix_api/admin/upload/titlecrew).\n\n### Request Body\n\nThe request should include a form-data body type with a key \"truncated_title.crew\" of type file, containing the title crew information to be uploaded.\n\n### Response\n\nUpon successful execution, the API returns a 200 status with a JSON response containing a status and message."
			},
			"response": []
		},
		{
			"name": "6. title_episode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					},
					{
						"key": "User-Agent",
						"value": "insomnia/8.5.1"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "truncated_title.episode",
							"type": "file",
							"src": "postman-cloud:///1eecdb80-14e7-46a0-b4c2-6848485e2d12"
						}
					]
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleepisode",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"upload",
						"titleepisode"
					]
				},
				"description": "This API endpoint allows administrators to upload title crew information for NTUAFlix. The HTTP POST request should be made to [https://localhost:9876/ntuaflix_api/admin/upload/titleepisode](https://localhost:9876/ntuaflix_api/admin/upload/titlecrew).\n\n### Request Body\n\nThe request should include a form-data body type with a key \"truncated_title.episode\" of type file, containing the title crew information to be uploaded.\n\n### Response\n\nUpon successful execution, the API returns a 200 status with a JSON response containing a status and message."
			},
			"response": []
		},
		{
			"name": "7. title_principals",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					},
					{
						"key": "User-Agent",
						"value": "insomnia/8.5.1"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "truncated_title.principals",
							"type": "file",
							"src": "postman-cloud:///1eecdb80-ec78-4f60-9f87-8acdb61bef14"
						}
					]
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleprincipals",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"upload",
						"titleprincipals"
					]
				},
				"description": "This API endpoint allows administrators to upload title crew information for NTUAFlix. The HTTP POST request should be made to [https://localhost:9876/ntuaflix_api/admin/upload/titleprincipals](https://localhost:9876/ntuaflix_api/admin/upload/titlecrew).\n\n### Request Body\n\nThe request should include a form-data body type with a key \"truncated_title.principals\" of type file, containing the title crew information to be uploaded.\n\n### Response\n\nUpon successful execution, the API returns a 200 status with a JSON response containing a status and message."
			},
			"response": []
		},
		{
			"name": "8. title_ratings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.length.above(0, \"Value should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					},
					{
						"key": "User-Agent",
						"value": "insomnia/8.5.1"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "truncated_title.ratings",
							"type": "file",
							"src": "postman-cloud:///1eecdb81-d412-4830-abab-d9a68451fc50"
						}
					]
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/upload/titleratings",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"upload",
						"titleratings"
					]
				},
				"description": "This API endpoint allows administrators to upload title crew information for NTUAFlix. The HTTP POST request should be made to [https://localhost:9876/ntuaflix_api/admin/upload/titleratings](https://localhost:9876/ntuaflix_api/admin/upload/titlecrew).\n\n### Request Body\n\nThe request should include a form-data body type with a key \"truncated_title.ratings\" of type file, containing the title crew information to be uploaded.\n\n### Response\n\nUpon successful execution, the API returns a 200 status with a JSON response containing a status and message."
			},
			"response": []
		},
		{
			"name": "post bygenre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'titleObjectList' array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.titleObjectList).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate titleID property\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.titleObjectList).to.exist.and.to.be.an('array');",
							"    ",
							"    responseData.titleObjectList.forEach(function (titleObject) {",
							"        pm.expect(titleObject.titleID).to.exist.and.to.be.a('string').and.to.have.length.above(0, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "User-Agent",
						"value": "insomnia/8.6.1"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"qgenre\" : \"comedy\",\r\n    \"minrating\" : 8.7\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/bygenre",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"bygenre"
					]
				},
				"description": "This endpoint is used to retrieve content from the NTUAFlix API based on a specific genre. It is an HTTP POST request to the specified URL.\n\n### Request Body\n\n- The request body should be in raw format and include the following parameters:\n    - `qgenre` (string): The genre for which content is being requested.\n    - `minrating` (number): The minimum rating of the content to be retrieved.\n    - yrFrom (number): (optional) The minimum year of release.\n    - yrTo (number): (optional) The year of last release.\n\n### Response\n\n- Status: 404\n- Content-Type: application/json\n    \n\n### Example\n\n``` json\n{\n    \"qgenre\": \"action\",\n    \"minrating\": 4\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "post searchtitle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - titleObjectList\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.titleObjectList).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Each genre has the required field - genreTitle\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.titleObjectList).to.exist.and.to.be.an('array');",
							"",
							"    responseData.titleObjectList.forEach(function(titleObject){",
							"        pm.expect(titleObject.genres).to.exist.and.to.be.an('array');",
							"        ",
							"        titleObject.genres.forEach(function(genre){",
							"            pm.expect(genre.genreTitle).to.exist.and.to.be.a('string');",
							"        });",
							"    });",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"titlePart\": \"example\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/searchtitle",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"searchtitle"
					]
				},
				"description": "# Search Title API\n\nThis API endpoint allows you to search for titles based on the provided title part.\n\n## Request\n\n### Endpoint\n\nPOST [https://localhost:9876/ntuaflix_api/searchtitle](https://localhost:9876/ntuaflix_api/searchtitle)\n\n### Query Parameters\n\n- `titlePart` (string, required): The part of the title to search for.\n    \n\n## Response\n\n- `titleObjectList` (array): An array of title objects matching the search criteria.\n    - `titleID` (string): The unique identifier for the title.\n    - `type` (string): The type of the title.\n    - `originalTitle` (string): The original title of the title.\n    - `titlePoster` (string): The poster image URL for the title.\n    - `startYear` (integer): The start year of the title.\n    - `endYear` (integer): The end year of the title.\n    - `genres` (array): An array of genre titles associated with the title.\n        - `genreTitle` (string): The title of the genre.\n    - `avRating` (float): The average rating of the title.\n    - `nVotes` (integer): The number of votes received by the title.\n    - `titleAkas` (array): An array of alternate titles for the title.\n        - `akaTitle` (string): The alternate title.\n        - `regionAbbrev` (string): The region abbreviation for the alternate title.\n    - `principals` (array): An array of principal entities associated with the title.\n\n### Example\n\n``` json\n{\n    \"titleObjectList\": [\n        {\n            \"titleID\": \"123\",\n            \"type\": \"movie\",\n            \"originalTitle\": \"Original Title\",\n            \"titlePoster\": \"https://example.com/poster.jpg\",\n            \"startYear\": 2000,\n            \"endYear\": 2005,\n            \"genres\": [\n                {\n                    \"genreTitle\": \"Action\"\n                }\n            ],\n            \"avRating\": 8.5,\n            \"nVotes\": 1000,\n            \"titleAkas\": [\n                {\n                    \"akaTitle\": \"Alternate Title\",\n                    \"regionAbbrev\": \"US\"\n                }\n            ],\n            \"principals\": []\n        }\n    ]\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "post searchname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - nameObjectList\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.nameObjectList).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Each nameObject in the response contains the nameTitles array\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  ",
							"  responseData.nameObjectList.forEach(function(nameObject) {",
							"    pm.expect(nameObject.nameTitles).to.exist.and.to.be.an('array');",
							"  });",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "User-Agent",
						"value": "insomnia/8.6.1"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"namePart\": \"Audrey\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/searchname",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"searchname"
					]
				},
				"description": "### Search Name\n\nThis endpoint is used to search for a name in the NTUAFlix database.\n\n#### Request Body\n\n- `namePart` (string, required): The partial name to search for.\n    \n\n#### Response\n\nUpon a successful request, the response will contain a status code of 200 and a JSON object with the following structure:\n\n- `nameObjectList` (array): An array of objects containing details about the names found in the search.\n    - `nameID` (string): The ID of the name.\n    - `name` (string): The name of the person.\n    - `namePoster` (string): The poster of the person.\n    - `birthYr` (integer): The birth year of the person.\n    - `deathYr` (integer): The death year of the person.\n    - `profession` (string): The profession of the person.\n    - `nameTitles` (array): An array of titles associated with the person's name."
			},
			"response": []
		},
		{
			"name": "titlefull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the titleObject\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.titleObject).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Start year is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.titleObject.startYear).to.be.a('number').and.to.be.at.least(0, \"Start year should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Runtime minutes is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.titleObject.runtimeMinutes).to.be.a('number');",
							"    pm.expect(responseData.titleObject.runtimeMinutes).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Genres array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.genres).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.genres.length).to.be.at.least(1, \"Genres array should have at least one element\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "insomnia/8.6.0"
					}
				],
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/title1/tt0000929",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"title1",
						"tt0000929"
					]
				},
				"description": "# Get Title Information\n\nThis endpoint retrieves information about a specific title identified by its ID.\n\n## Request\n\n### Endpoint\n\n`GET` [https://localhost:9876/ntuaflix_api/title1/:titleID](https://localhost:9876/ntuaflix_api/title/tt0000929)\n\n## Response\n\n- Status: 200\n- Content-Type: application/json\n    \n\n``` json\n{\n    \"titleObject\": {\n        \"titleID\": \"\",\n        \"type\": \"\",\n        \"originalTitle\": \"\",\n        \"titlePoster\": \"\",\n        \"startYear\": 0,\n        \"endYear\": 0,\n        \"genres\": [\n            {\n                \"genreTitle\": \"\"\n            }\n        ],\n        \"runtimeMinutes\" : 0,\n        \"avRating\": null,\n        \"nVotes\": null,\n        \"titleAkas\": [\n            {\n                \"akaTitle\": \"\",\n                \"regionAbbrev\": \"\"\n            }\n        ],\n        \"principals\": []\n    }\n}\n\n ```\n\nThis response provides information about the title, including its ID, type, original title, poster, start and end year, genres, average rating, number of votes, alternative titles, and principal cast."
			},
			"response": []
		},
		{
			"name": "a.titleID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Start Year is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.titleObject.startYear).to.be.a('number');",
							"    pm.expect(responseData.titleObject.startYear).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"The 'genres' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.titleObject.genres).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/title/tt0000929",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"title",
						"tt0000929"
					]
				},
				"description": "# Get Title Information\n\nThis endpoint retrieves information about a specific title identified by its ID.\n\n## Request\n\n### Endpoint\n\n`GET` [https://localhost:9876/ntuaflix_api/title/tt0000929](https://localhost:9876/ntuaflix_api/title/tt0000929)\n\n## Response\n\n- Status: 200\n- Content-Type: application/json\n    \n\n``` json\n{\n    \"titleObject\": {\n        \"titleID\": \"\",\n        \"type\": \"\",\n        \"originalTitle\": \"\",\n        \"titlePoster\": \"\",\n        \"startYear\": 0,\n        \"endYear\": 0,\n        \"genres\": [\n            {\n                \"genreTitle\": \"\"\n            }\n        ],\n        \"avRating\": null,\n        \"nVotes\": null,\n        \"titleAkas\": [\n            {\n                \"akaTitle\": \"\",\n                \"regionAbbrev\": \"\"\n            }\n        ],\n        \"principals\": []\n    }\n}\n\n ```\n\nThis response provides information about the title, including its ID, type, original title, poster, start and end year, genres, average rating, number of votes, alternative titles, and principal cast."
			},
			"response": []
		},
		{
			"name": "b. searchtitle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'titleObjectList' array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.titleObjectList).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"titlePart\": \"Hen Hop\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/searchtitle",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"searchtitle"
					]
				},
				"description": "# Search Title API\n\nThis API endpoint allows you to search for titles based on the provided title part.\n\n## Request\n\n### Endpoint\n\n`GET` [https://localhost:9876/ntuaflix_api/searchtitle](https://localhost:9876/ntuaflix_api/searchtitle)\n\n### Query Parameters\n\n- `titlePart` (string, required): The part of the title to search for.\n    \n\n## Response\n\n- `titleObjectList` (array): An array of title objects matching the search criteria.\n    - `titleID` (string): The unique identifier for the title.\n    - `type` (string): The type of the title.\n    - `originalTitle` (string): The original title of the title.\n    - `titlePoster` (string): The poster image URL for the title.\n    - `startYear` (integer): The start year of the title.\n    - `endYear` (integer): The end year of the title.\n    - `genres` (array): An array of genre titles associated with the title.\n        - `genreTitle` (string): The title of the genre.\n    - `avRating` (float): The average rating of the title.\n    - `nVotes` (integer): The number of votes received by the title.\n    - `titleAkas` (array): An array of alternate titles for the title.\n        - `akaTitle` (string): The alternate title.\n        - `regionAbbrev` (string): The region abbreviation for the alternate title.\n    - `principals` (array): An array of principal entities associated with the title.\n\n### Example\n\n``` json\n{\n    \"titleObjectList\": [\n        {\n            \"titleID\": \"123\",\n            \"type\": \"movie\",\n            \"originalTitle\": \"Original Title\",\n            \"titlePoster\": \"https://example.com/poster.jpg\",\n            \"startYear\": 2000,\n            \"endYear\": 2005,\n            \"genres\": [\n                {\n                    \"genreTitle\": \"Action\"\n                }\n            ],\n            \"avRating\": 8.5,\n            \"nVotes\": 1000,\n            \"titleAkas\": [\n                {\n                    \"akaTitle\": \"Alternate Title\",\n                    \"regionAbbrev\": \"US\"\n                }\n            ],\n            \"principals\": []\n        }\n    ]\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "c. bygenre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - titleObjectList\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.titleObjectList).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"titleObjectList is an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.titleObjectList).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"titleObjectList is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.titleObjectList).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false,
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"qgenre\" : \"comedy\",\r\n    \"minrating\" : 8.7\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/bygenre",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"bygenre"
					]
				},
				"description": "This endpoint is used to retrieve content from the NTUAFlix API based on a specific genre. It is an HTTP GET request to the specified URL.\n\n### Request Body\n\n- The request body should be in raw format and include the following parameters:\n    \n    - `qgenre` (string): The genre for which content is being requested.\n        \n    - `minrating` (number): The minimum rating of the content to be retrieved.\n        \n    - yrFrom (number): (optional) The minimum year of release.\n        \n    - yrTo (number): (optional) The year of last release.\n        \n\n### Response\n\n- Status: 404\n    \n- Content-Type: application/json\n    \n\n### Example\n\n``` json\n{\n    \"qgenre\": \"action\",\n    \"minrating\": 4\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "d. nameID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Verify that nameID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.nameObject.nameID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"nameID should not be empty\");",
							"});",
							"",
							"pm.test(\"Verify that the nameTitles array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.nameObject.nameTitles).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/name/nm0000030",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"name",
						"nm0000030"
					]
				},
				"description": "\nThis endpoint makes an HTTP GET request to retrieve information about a specific name with the given ID from the NTUAFlix API.\n\n### Request\n\n- Method: GET\n- Endpoint: https://localhost:9876/ntuaflix_api/name/nm0000030\n\n### Response\n\nUpon a successful request, the server responds with a status code of 200 and a JSON object containing the details of the requested name. The response includes the following fields:\n- `nameObject` (object) - An object containing details about the name, including ID, name, poster, birth year, death year, profession, and titles.\n\nExample response:\n```json\n{\n    \"nameObject\": {\n        \"nameID\": \"\",\n        \"name\": \"\",\n        \"namePoster\": \"\",\n        \"birthYr\": 0,\n        \"deathYr\": 0,\n        \"profession\": \"\",\n        \"nameTitles\": []\n    }\n}\n```\n"
			},
			"response": []
		},
		{
			"name": "e. searchname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Verify that the 'nameObjectList' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.nameObjectList).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that nameID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.nameObjectList).to.be.an('array');",
							"    ",
							"    responseData.nameObjectList.forEach(function (nameObject) {",
							"        pm.expect(nameObject.nameID).to.be.a('string').and.to.have.length.above(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"namePart\": \"Audrey\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/searchname",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"searchname"
					]
				},
				"description": "### Search Name\n\nThis endpoint is used to search for a name in the NTUAFlix database.\n\n#### Request Body\n\n- `namePart` (string, required): The partial name to search for.\n    \n\n#### Response\n\nUpon a successful request, the response will contain a status code of 200 and a JSON object with the following structure:\n\n- `nameObjectList` (array): An array of objects containing details about the names found in the search.\n    \n    - `nameID` (string): The ID of the name.\n        \n    - `name` (string): The name of the person.\n        \n    - `namePoster` (string): The poster of the person.\n        \n    - `birthYr` (integer): The birth year of the person.\n        \n    - `deathYr` (integer): The death year of the person.\n        \n    - `profession` (string): The profession of the person.\n        \n    - `nameTitles` (array): An array of titles associated with the person's name."
			},
			"response": []
		},
		{
			"name": "9. resetall",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'status' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost:9876/ntuaflix_api/admin/resetall",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "9876",
					"path": [
						"ntuaflix_api",
						"admin",
						"resetall"
					]
				},
				"description": "\nThis endpoint is used to reset all data for the admin in the NTUAFlix API. Upon successful execution, the server returns a status code of 200 along with an empty JSON response.\n\n"
			},
			"response": []
		}
	]
}